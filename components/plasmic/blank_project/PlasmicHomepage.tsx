// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: KkPK9YV1Lcw4GqdqjAF6q
// Component: mehEJpe9rmj7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantscpd9VEj8YgW7 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: cpd9vEj-8ygW7/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: KkPK9YV1Lcw4GqdqjAF6q/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: mehEJpe9rmj7/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Txb3b_sk63Q/icon
import Icon17Icon from "./icons/PlasmicIcon__Icon17"; // plasmic-import: X2U3O8Tk0U0/icon
import Icon16Icon from "./icons/PlasmicIcon__Icon16"; // plasmic-import: bJrMOeU-X1C/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  section?: p.Flex<"section">;
  foreground?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscpd9VEj8YgW7()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"       Welcome To Ravej."}
          </h1>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__bNjb8
            )}
          >
            {
              "Ravej is your go-to website for any type of online gaming, we have a wide variety of html games to your disposal."
            }
          </div>

          <p.Stack
            as={"section"}
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            hasGap={true}
            className={classNames(projectcss.all, sty.section)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground"}
              data-plasmic-override={overrides.foreground}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jOz2N)}
              >
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"What we offer*"}
                </h2>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jbu68
                  )}
                >
                  {
                    "Here is just a small amount of what Ravej offers with countless more result to come, we try to update our system most often so more people can enjoy ad free gaming."
                  }
                </div>

                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon3Icon
                      className={classNames(projectcss.all, sty.svg__cwR4)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eXySo
                    )}
                  >
                    {"Start Gaming"}
                  </div>

                  {true ? (
                    <Icon17Icon
                      className={classNames(projectcss.all, sty.svg__nCYm)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__lGKzy)}>
                <div className={classNames(projectcss.all, sty.freeBox__jUgik)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r8CC
                    )}
                  >
                    {"High Quality"}
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg___6PDl)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__cqOyZ)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lcUvl
                    )}
                  >
                    {"Smooth FPS"}
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__ogmpH)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__kcVnU)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lnwLe
                    )}
                  >
                    {"Reliability"}
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__lrhy1)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__qGhvK)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q7Cvt
                    )}
                  >
                    {"Unblocked Gaming"}
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__hxGqh)}
                    role={"img"}
                  />
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__eZxge)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0MGIw
                    )}
                  >
                    {"Quick Loading"}
                  </div>

                  <Icon16Icon
                    className={classNames(projectcss.all, sty.svg__j7Gp)}
                    role={"img"}
                  />
                </div>
              </div>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "h1", "section", "foreground", "h2", "link"],
  h1: ["h1"],
  section: ["section", "foreground", "h2", "link"],
  foreground: ["foreground", "h2", "link"],
  h2: ["h2"],
  link: ["link"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  section: "section";
  foreground: "div";
  h2: "h2";
  link: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    section: makeNodeComponent("section"),
    foreground: makeNodeComponent("foreground"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
